# RAGとXAIの基礎ガイド

## 1. はじめに
本ドキュメントでは、**Retrieval-Augmented Generation (RAG)** と **Explainable AI (XAI)** の2つの概念について、技術的な背景や代表的アプローチ、メリット・課題を体系的にまとめます。どちらも近年の生成 AI システムを設計・運用するうえで重要なトピックです。

---

## 2. Retrieval-Augmented Generation (RAG)
### 2.1 コンセプト
- **生成モデル＋情報検索** を組み合わせ、外部知識を取り込みながら応答を生成するアーキテクチャ。
- 従来の LLM 単体では参照できない最新情報や専門知識を、**Retriever** が検索して **Generator** に渡すことで高精度な出力を実現。

### 2.2 典型的パイプライン
1. **クエリエンコーディング**: ユーザ入力を埋め込みベクトル化（例: `text-embedding-3-large`）。
2. **検索フェーズ**: ベクトルDB（FAISS、Weaviate など）から類似ドキュメントを k 件取得。
3. **プロンプト構築**: 取得文書をコンテキストとして LLM へ渡す。
4. **生成フェーズ**: LLM が最終回答を生成。
5. **(任意) 後処理**: 引用整形、信頼度スコア付与など。

### 2.3 主な利点
- **最新性**: モデルの訓練後に発生した情報も利用可。
- **事実性向上**: 参照元とともに回答することでハルシネーションを抑制。
- **軽量ファインチューニング**: モデルパラメータを更新せずドメイン適応が可能。

### 2.4 課題と対策
| 課題 | 代表的対策 |
| --- | --- |
| 検索品質への依存 | Embedding の正規化、多段検索 (hybrid / RRF) |
| コンテキスト長制限 | Chunk サイズ最適化、長文対応モデル (LongLLM) |
| ランタイム遅延 | キャッシュ、オンデバイス DB、非同期処理 | 

### 2.5 代表的ライブラリ / SaaS
- **LangChain**, **LlamaIndex**, **Haystack**
- OpenAI Assistants + `vector_store`、Amazon Bedrock RAG といったマネージドサービス

---

## 3. Explainable AI (XAI)
### 3.1 目的
- **AI システムの意思決定過程を人が理解・検証できるようにする** こと。
- 信頼性向上、法規制 (GDPR, EU AI Act) への準拠、モデル改善へのフィードバックが主なモチベーション。

### 3.2 解釈可能性の分類
| 観点 | ローカル | グローバル |
| ---- | -------- | ----------- |
| 定義 | 単一予測の理由を説明 | モデル全体の挙動を説明 |
| 例 | SHAP/LIME、Grad-CAM | 特徴量重要度、ルール抽出 |

### 3.3 技術アプローチ
- **ポストホック型**: 訓練後のブラックボックスモデルに対し、外部手法で説明 (SHAP, LIME, Integrated Gradients)。
- **インタープリタブルモデル**: 決定木、線形回帰など予め人間可読な構造を持つ。
- **注意可視化**: Transformer のアテンションマップを視覚化し、語句間関係を示す。
- **事例ベース**: 代表的な類似インスタンスを提示する (Case-Based Reasoning)。

### 3.4 XAI 実装時の注意点
- **フェアネス**: 説明にバイアスが混入しないか検証。
- **忠実度 vs. 簡潔さ**: 詳細過ぎる説明は理解の障壁となる。
- **ユーザ適合**: エンドユーザの専門性に応じて説明粒度を調節。

---

## 4. RAG と XAI の交差点
- **根拠付き回答**: RAG で引用文を提示し、その順位スコアを XAI の一部として扱う。
- **システムレベル説明**: Retriever のスコアリング根拠＋Generator の生成確率やアテンションを可視化し、 end-to-end の透明性を高める。
- **デバッグ支援**: 検索失敗か生成誤りかを切り分け、改善サイクルを短縮。

---

## 5. まとめ
- **RAG** は外部知識で LLM の回答品質を向上させる手法。
- **XAI** は AI モデルを人が理解・信頼できるようにする枠組み。
- 両者を組み合わせることで、**正確かつ透明性の高い生成 AI** を構築できる。

ご活用の際は、データソース品質・説明対象ユーザのニーズ・処理コストなどを踏まえ、アーキテクチャと説明手法を設計してください。
